from asyncio import Future
from io import IOBase
from slack.web.base_client import BaseClient as BaseClient, SlackResponse as SlackResponse
from typing import Any, List, Union, Awaitable

class WebClient(BaseClient):
    def admin_apps_approve(self, *, app_id: str=..., request_id: str=..., **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_apps_requests_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_apps_restrict(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_session_reset(self, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_inviteRequests_approve(self, invite_request_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_inviteRequests_approved_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_inviteRequests_denied_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_inviteRequests_deny(self, invite_request_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_inviteRequests_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_admins_list(self, team_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_create(self, team_domain: str, team_name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_owners_list(self, team_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_settings_setDescription(self, team_id: str, description: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_settings_setIcon(self, team_id: str, image_url: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_teams_settings_setName(self, team_id: str, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_assign(self, team_id: str, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_invite(self, team_id: str, email: str, channel_ids: List[str], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_remove(self, team_id: str, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_setAdmin(self, team_id: str, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_setOwner(self, team_id: str, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def admin_users_setRegular(self, team_id: str, user_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def api_test(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def auth_revoke(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def auth_test(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def bots_info(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_archive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_create(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_history(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_info(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_invite(self, channel: str, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_join(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_kick(self, channel: str, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_leave(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_mark(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_rename(self, channel: str, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_replies(self, channel: str, thread_ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_setPurpose(self, channel: str, purpose: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_setTopic(self, channel: str, topic: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def channels_unarchive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_delete(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_deleteScheduledMessage(self, channel: str, scheduled_message_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_getPermalink(self, channel: str, message_ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_meMessage(self, channel: str, text: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_postEphemeral(self, channel: str, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_postMessage(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_scheduleMessage(self, channel: str, post_at: str, text: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_unfurl(self, channel: str, ts: str, unfurls: dict, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_update(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def chat_scheduledMessages_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_archive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_close(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_create(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_history(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_info(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_invite(self, channel: str, users: List[str], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_join(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_kick(self, channel: str, user: str, **kwargs: Any) -> Awaitable[Any]: ...
    def conversations_leave(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_list(self, **kwargs: Any) -> Awaitable[Any]: ...
    def conversations_members(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_open(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_rename(self, channel: str, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_replies(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_setPurpose(self, channel: str, purpose: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_setTopic(self, channel: str, topic: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def conversations_unarchive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dialog_open(self, dialog: dict, trigger_id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dnd_endDnd(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dnd_endSnooze(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dnd_info(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dnd_setSnooze(self, num_minutes: int, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def dnd_teamInfo(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def emoji_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_comments_delete(self, file: str, id: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_delete(self, file: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_info(self, file: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_info(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_add(self, external_id: str, external_url: str, title: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_update(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_remove(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_remote_share(self, channels: Union[str, List[str]], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_revokePublicURL(self, file: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_sharedPublicURL(self, file: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def files_upload(self, *, file: Union[str, IOBase]=..., content: str=..., **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_archive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_create(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_createChild(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_history(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_info(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_invite(self, channel: str, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_kick(self, channel: str, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_leave(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_mark(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_open(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_rename(self, channel: str, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_replies(self, channel: str, thread_ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_setPurpose(self, channel: str, purpose: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_setTopic(self, channel: str, topic: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def groups_unarchive(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_close(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_history(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_mark(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_open(self, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def im_replies(self, channel: str, thread_ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def migration_exchange(self, users: List[str], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_close(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_history(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_mark(self, channel: str, ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_open(self, users: List[str], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def mpim_replies(self, channel: str, thread_ts: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def oauth_v2_access(self, client_id: str, client_secret: str, code: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def oauth_access(self, client_id: str, client_secret: str, code: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def pins_add(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def pins_list(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def pins_remove(self, channel: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reactions_add(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reactions_get(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reactions_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reactions_remove(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reminders_add(self, text: str, time: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reminders_complete(self, reminder: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reminders_delete(self, reminder: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reminders_info(self, reminder: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def reminders_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def rtm_connect(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def rtm_start(self, **kwargs: Any) -> Awaitable[Any]: ...
    def search_all(self, query: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def search_files(self, query: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def search_messages(self, query: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def stars_add(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def stars_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def stars_remove(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def team_accessLogs(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def team_billableInfo(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def team_info(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def team_integrationLogs(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def team_profile_get(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_create(self, name: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_disable(self, usergroup: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_enable(self, usergroup: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_update(self, usergroup: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_users_list(self, usergroup: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def usergroups_users_update(self, usergroup: str, users: List[str], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_conversations(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_deletePhoto(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_getPresence(self, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_identity(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_info(self, user: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_list(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_lookupByEmail(self, email: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_setPhoto(self, image: Union[str, IOBase], **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_setPresence(self, presence: str, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_profile_get(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def users_profile_set(self, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def views_open(self, trigger_id: str, view: dict, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def views_push(self, trigger_id: str, view: dict, **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def views_update(self, view: dict, *, external_id: str=..., view_id: str=..., **kwargs: Any) -> Union[Future, SlackResponse]: ...
    def views_publish(self, user_id: str, view: dict, **kwargs: Any) -> Union[Future, SlackResponse]: ...
