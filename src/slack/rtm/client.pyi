import asyncio
from slack.web.client import WebClient as WebClient
from ssl import SSLContext
from typing import Any, Callable, Optional

class RTMClient:
    token: Any = ...
    run_async: Any = ...
    auto_reconnect: Any = ...
    ssl: Any = ...
    proxy: Any = ...
    timeout: Any = ...
    base_url: Any = ...
    connect_method: Any = ...
    ping_interval: Any = ...
    headers: Any = ...
    def __init__(self, token: str, *, run_async: Optional[bool]=..., auto_reconnect: Optional[bool]=..., ssl: Optional[SSLContext]=..., proxy: Optional[str]=..., timeout: Optional[int]=..., base_url: Optional[str]=..., connect_method: Optional[str]=..., ping_interval: Optional[int]=..., loop: Optional[asyncio.AbstractEventLoop]=..., headers: Optional[dict]=...) -> None: ...
    @staticmethod
    def run_on(event: str) -> Any: ...
    @classmethod
    def on(cls: Any, event: str, callback: Callable) -> Any: ...
    def start(self) -> asyncio.Future: ...
    def stop(self) -> None: ...
    def send_over_websocket(self, payload: dict) -> Any: ...
    async def ping(self) -> None: ...
    async def typing(self, channel: str) -> Any: ...
